#title           :choose.py
#description     :This will choose who influences who.
#author          :gb
#date            :04/09/2015
#version         :0.1
#notes           : 
#python_version  :2.7.8
#==============================================================================

# Import the modules needed to run the script.
from random import randint, random, choice

#Uniformly randomly choose an edge.
def choose_1():

    #Uniformly randomly choose the i and j values of the index of the edge.
    edge_chosen_index = indices[choice(range(n))][choice(range(n))]
    
    #Must have n value available. Is this ok?
    edge_chosen_value = matrix[edge_chosen_index[0]][edge_chosen_index[1]]

    if edge_chosen_value != 0:   
        
        return edge_chosen_index
        
    else:
    
        return choose_1()


#Randomly choose an edge biased by the prestige of potential influencers.
def choose_2():

    #Uniformly randomly choose a node to be influenced.
    influenced = choice(range(n))
    
    #The list of all possible edges adjacent that node.
    influenced_edges = matrix[influenced]
    
    #The list of indices of all possible edges for that node.
    influenced_edges_indices = indices[influenced]
    
    #Make sure that node is adjacent to at least one edge.
    influencers = [i[1] for i in influenced_edges_indices if matrix[influenced][i[1]] != 0]
    
    if sum(influenced_edges) != 0:
    
        #*matrix replaces rows with columns (?). Gives list of in-degrees for each potential influencer.     
        prestiges = [sum(zip(*matrix)[i]) for i in influencers]
        
        #Sum the prestiges of all potential influencers.
        total_prestige = sum(prestiges)
        
        #Normalise prestige by total prestige.
        weighted_influencers = [(1.0*i)/total_prestige for i in prestiges]
        
        #Randomly choose one influencer biased by the influencers' prestige.
        influencer_chosen = numpy.random.choice(influencers, p = weighted_influencers)
              
        return (influenced,influencer_chosen)
        
    else:
    
        return choose_2()
        
    


